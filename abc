console.log("Frequency : ")
                        console.log(value);
                        var [responseFormatted, responseFontSizes, frequencyColor] = parseResponseAndGetFontSizes(value);
                        var string = '<p style=\"width: 90%; display:inline-block;\">\n';
                        for (var i in responseFontSizes) {
                                var currFontSizes = responseFontSizes[i];
                                var currWords = responseFormatted[i];
                                var currColor = frequencyColor[i];
                                console.log(currColor);
                                console.log(document.getElementById("response-area").innerHTML);
                                string = string + '<span style=\"font-size: ' + Math.ceil(currFontSizes).toString() + 'px; color: ' + currColor.toString() + ';\">';
                                for (var word in currWords) {
                                    console.log(currWords[word]);
                                    string = string + " " + currWords[word];
                                }
                                string = string +'</span>';
                        }
                        string = string + "</p>";
                        document.getElementById("response-area").innerHTML = string;
                        document.getElementById('textForm').reset();
                        console.log("Mean = "+ mean);
                        console.log("STD = "+ std);
                    });
                }
            }
            xmlhttp.open("GET", str );
            xmlhttp.send();
        }
    });

}
  
// Function to get get form values
function getInputVal(id){
return document.getElementById(id).value;
}

var mean;
var std;

function ncdf(x, mean, std) {
    var x = (x - mean) / std;
    var t = 1 / (1 + .2315419 * Math.abs(x));
    var d =.3989423 * Math.exp( -x * x / 2);
    var prob = d * t * (.3193815 + t * ( -.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));
    if( x > 0 ) prob = 1 - prob;
    return 1 - prob;
}

function parseResponseAndGetFontSizes(response) {
    var responseDict = { };
    var lengths = [];
    var totalWords = 0;
    var responseFontSizes = { };
    var colorsBasedOnFrequency = { };
    // calculate mean, and display certail imp words only
    for (var elements in response) {
        //console.log(elements);
        var arr = [];
        var flag = false;
        for (var words in response[elements]) {
            flag = true;
            arr.push(response[elements][words]);
        }
        if(flag) {
            lengths.push(arr.length);
            console.log(arr.length);
            totalWords = totalWords + arr.length;
        }
    }
    var meanOfWords = totalWords/lengths.length;
    var frequencies = [];
    var totalOfFrequencies = 0;
    for (var elements in response) {
        if( response[elements].length < meanOfWords) {
            var arr = [];
            var flag = false;
            for (var words in response[elements]) {
                flag = true;
                arr.push(response[elements][words]);
            }
            if(flag) {
                responseDict[elements] = arr;
                frequencies.push(parseInt(elements));
                console.log(elements);
                totalOfFrequencies = totalOfFrequencies + parseInt(elements);
            }
        }
    }
    console.log(frequencies);
    mean = totalOfFrequencies/frequencies.length;
    std = getStandardDeviation(frequencies);
    console.log("Debug = "+ totalOfFrequencies + " " + mean + " " + std);
    var keys = Object.keys(responseDict);
    for(var i in frequencies) {
        console.log("Font size for words with frequency "+ keys[i] + " = " + Math.max(10, (100*(1-ncdf(frequencies[i],mean, std)))));
        responseFontSizes[keys[i]] = Math.max(10,(100*(1-ncdf(frequencies[i],mean, std))));
        colorsBasedOnFrequency[keys[i]] = colorExtract(1-ncdf(frequencies[i],mean, std*2));
    }
    return [responseDict, responseFontSizes, colorsBasedOnFrequency];
}

function getStandardDeviation (array) {
    const n = array.length;
    const mean = array.reduce((a, b) => a + b) / n
    return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)
}


//This is a special-case, not a generic solution, but by simply doing a linear gradient between hues and scrunching the blend in the middle range (i.e. the green) you can get a reasonable approximation without color stepping:
// reference https://stackoverflow.com/questions/16399677/set-background-color-based-on-outdoor-temperature
function colorExtract(t)
{
    var a = Math.max(0.5, (t+0.5)/1.5);
    // Scrunch the green/cyan range in the middle
    var sign = (a < .5) ? -1 : 1;
    a = sign * Math.pow(2 * Math.abs(a - .5), .35)/2 + .5;
    // Linear interpolation between the cold and hot
    var h0 = 259;
    var h1 = 12;
    var h = (h0) * (1 - a) + (h1) * (a);
    var rgb = HSVtoRGB(h, 0.65, 0.75);
    var color = "rgb("+rgb['r'].toString()+","+rgb['g'].toString()+","+rgb['b'].toString()+")";
    return color;
};

function HSVtoRGB(h, s, v) {
    var r, g, b, i, f, p, q, t;
    if (arguments.length === 1) {
        s = h.s, v = h.v, h = h.h;
    }
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0: r = v, g = t, b = p; break;
        case 1: r = q, g = v, b = p; break;
        case 2: r = p, g = v, b = t; break;
        case 3: r = p, g = q, b = v; break;
        case 4: r = t, g = p, b = v; break;
        case 5: r = v, g = p, b = q; break;
    }
    return {
        'r': Math.round(r * 255),
        'g': Math.round(g * 255),
        'b': Math.round(b * 255) };
}



